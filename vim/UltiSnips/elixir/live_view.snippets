global !p

# ~/.vim/pythonx/elixir_helpers.py
from elixir_helpers import to_module_name

def key_closing(opening):
    return "," if opening == ":" else ":"

endglobal

snippet assign "Phoenix.LiveView.assign/(2|3)"
assign(${1:socket, }${2::}${3:key}`!p snip.rv = key_closing(t[2])` ${4:$3})$0
endsnippet

snippet "assign new" "Phoenix.LiveView.assign_new/3"
assign_new(${1:${2|assigns,socket|}, }:${3:key}, fn -> ${4:do_something} end)
endsnippet

snippet "connected(:??)?" "Phoenix.LiveView.connected?/1" r
connected?(socket)$0
endsnippet

snippet "handle event" "Phoenix.(LiveView|LiveComponent).handle_event/3"
@impl true
def handle_event("${1:event}", ${2|params,_unsigned_params|}, socket) do
  ${4:socket = ${5:assign(socket, ${6::}${7:key}`!p snip.rv = key_closing(t[6])` ${8:$7}}})$0
  ${3|{:noreply\, socket},{:reply\, reply_map\, socket}|}
end
endsnippet

snippet heex "Phoenix.LiveView.Helpers.sigil_H/2"
~H"""
$0
"""
endsnippet

snippet "live route" "Defines a LiveView route"
live "/${1:path}", ${2:`!p snip.rv = to_module_name(t[1])`}Live${3:, :${4:action}${5:, ${6:opts}}}$0
endsnippet

snippet mount "Phoenix.LiveView.mount/3"
@impl true
def mount(${1|params,_params,:not_mounted_at_router|}, ${2:_}session, socket) do
  ${3:socket = ${4:assign(socket, ${5::}${6:key}`!p snip.rv = key_closing(t[5])` ${7:$6}}})$0
  {:ok, socket}
end
endsnippet

snippet render "Phoenix.(LiveView|LiveComponent).render/1"
@impl true
def render(assigns) do
  ~H"""
  $0
  """
end
endsnippet

snippet "update 3" "Phoenix.LiveView.update/3"
update(${1|socket,assigns|}, :${2:key}, ${3:fun})$0
endsnippet
