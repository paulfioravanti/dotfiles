global !p

import re

_MODULE_FILEPATH = re.compile("lib\/([^\/]+)\/(?:(?:[^\/]+)\/)*([^\/]+).ex")
_DASHES_AND_UNDERSCORES = re.compile("[-_]")

def module_name():
    module_path_parts = _module_path_match().group(1, 2)
    module_parts = map(to_module_name, module_parts)
    return ".".join(module_parts)

def outer_module_name():
    outer_module_path = _module_path_match().group(1)
    return to_module_name(outer_module_path)

def to_module_name(string):
    return (
        re.sub(_DASHES_AND_UNDERSCORES, " ", string)
        .title()
        .replace(" ", "")
    )

def _module_path_match():
    return re.search(_MODULE_FILEPATH, path)

endglobal

snippet "assign 2" "Phoenix.LiveView.assign/2"
assign(socket, ${1:keyword_or_map})$0
endsnippet

snippet "assign 3" "Phoenix.LiveView.assign/2"
assign(socket, :${1:key}, ${2:value})$0
endsnippet

snippet def "define a multiline public function"
def ${1:function_name}${2:(${3:args})} do
  $0
end
endsnippet

snippet "def module" "Defines a module block"
defmodule ${1:`!p snip.rv = module_name()`} do
  $0
end
endsnippet

snippet "def single" "define a single line public function"
def ${1:function_name}${2:(${3:args})}, do: $0
endsnippet

snippet "error tuple" "define an :error tuple"
{:error, ${1:value}}$0
endsnippet

snippet "IO inspect" "IO.inspect/2"
IO.inspect(${1:item}${2:, ${3:opts}})$0
endsnippet

snippet keyword "Defines a literal Elixir keyword list"
${1:[}${2:key}: ${3:value}$0`!p snip.rv = "]" if t[1] == "[" else ""`
endsnippet

snippet map "Defines a literal Elixir map"
%{${1:key}: ${2:value}$0}
endsnippet

snippet "live route" "Defines a LiveView route"
live "/${1:path}", ${2:`!p snip.rv = to_module_name(t[1])`}Live${3:, :${4:action}${5:, ${6:opts}}}$0
endsnippet

snippet mount "Phoenix.LiveView.mount/3"
@impl true
def mount(${1|_params,params|}, ${2|_session,session|}, socket) do
  $0
end
endsnippet

snippet "ok tuple" "define an :ok tuple"
{:ok, ${1:value}}$0
endsnippet

snippet "use phx" "use Phoenix module"
use ${1:`!p snip.rv = outer_module_name()`}, :${2|channel,component,controller,live_component,live_view,router,view|}$0
endsnippet

snippet "validate length" "ecto validate_length"
validate_length(${1:${2:changeset}, }:${3:field}, ${4:is: ${5:length}${6:, }}${7:min: ${8:length}${9:, }}${10:max: ${11:length}${12:, }}${13:count: :${14:length_type}${15:, }}${16:message: "${17:message}"})$0
endsnippet
