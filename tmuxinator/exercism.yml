# ~/.tmuxinator/exercism.yml

<%
  lang = @args[0]
  exercise = @args[1]
  root_path = "#{Dir.home}/exercism/#{lang}/#{exercise}"
  if !File.directory?(root_path)
    STDERR.puts("\e[31mCould not find exercise #{root_path}\e[0m")
    STDERR.puts("Is \e[33m'#{exercise}'\e[0m a valid exercise name or \e[33m'#{lang}'\e[0m a valid language?")
    exit 1
  end
%>

name: exercism
# Eg: mux exercism ruby hello-world => exercism/ruby/hello-world
root: <%= root_path %>

on_project_first_start:
  <% if lang == "cpp" %>
  <% if !File.directory?("#{root_path}/build") %>
  - mkdir build
  - cd build
  - cmake -G "Unix Makefiles" ..
  <% end %>
  <% elsif lang == "elm" %>
  - npm install
  # - elm install
  # elm-analyse
  - open --background http://localhost:3001
  <% elsif lang == "javascript" %>
  # Remove any existing package-lock.json files so that fsevents can be
  # installed properly
  - rm package-lock.json
  - npm install
  <% elsif lang == "typescript" %>
  # Remove any existing yarn.lock files so that fsevents can be installed
  # properly
  - rm yarn.lock
  - yarn install
  <% end %>
  # Grip
  - open --background http://localhost:6419

pre_window:
  # NOTE: uncomment if I find that I need to use language versions
  # other than the latest.
  # <% if lang == "ruby" %>
  # - asdf local ruby 2.6.3
  # <% elsif ... %>
  # - ...
  # <% end %>

startup_window: editor

windows:
  - editor: vim
  <% if lang == "bash" %>
  <% underscored_filename = exercise.tr("-", "_") %>
  # brew install bats
  # npm install -g watch
  - tests: watch '<%= "bats #{underscored_filename}_test.sh" %>'
  - console: bash
  - lint: watch '<%= "shellcheck #{underscored_filename}.sh" %>'
  <% elsif lang == "c" %>
  # NOTE: 6 seconds seems to be the magic number to disable the test command
  # to make sure it doesn't run twice and pollute the test output.
  # Option reference: https://github.com/mikeal/watch#cli
  - tests: watch --wait=6 'make test'
  # No console/repl?
  # - console:
  <% elsif lang == "cpp" %>
  # NOTE: 6 seconds seems to be the magic number to disable the test command
  # to make sure it doesn't run twice and pollute the test output.
  # Option reference: https://github.com/mikeal/watch#cli
  - tests:
      root: <%= "#{root_path}/build" %>
      panes: watch --wait=6 'make' ..
  # No console/repl?
  # - console:
  <% elsif lang == "crystal" %>
  # NOTE: There's currently a bunch of warning spam in the console, so use
  # RUBYOPT="-W0" to silence it. REF: https://stackoverflow.com/a/28098594/567863
  - tests: RUBYOPT="-W0" guard --guardfile ~/exercism/crystal/Guardfile
  # https://github.com/crystal-community/icr
  - console: icr
  <% elsif lang == "elixir" %>
  <% underscored_filename = exercise.tr("-", "_") %>
  <% exercise_filename = "lib/#{underscored_filename}.ex" %>
  <% test_filename = "test/#{underscored_filename}_test.exs" %>
  <% test_helper = "test/test_helper.exs" %>
  # brew install watchexec just
  # https://github.com/watchexec/watchexec
  # https://github.com/casey/just
  - tests: >
      watchexec
      --watch <%= exercise_filename %>
      --watch <%= test_filename %>
      --clear
      --
      just
      --justfile ~/exercism/elixir/justfile
      tests
      <%= "#{exercise}/#{exercise_filename}" %>
      <%= "#{exercise}/#{test_filename}" %>
      <%= "#{exercise}/#{test_helper}" %>
  - console: iex
  <% elsif lang == "elm" %>
  - tests: elm-test --watch
  - console: elm repl
  - analyse: elm-analyse --serve --port 3001
  <% elsif lang == "erlang" %>
  # npm install -g watch
  # NOTE: 6 seconds seems to be the magic number to disable the test command
  # to make sure it doesn't run twice and pollute the test output.
  # Option reference: https://github.com/mikeal/watch#cli
  - tests: watch --wait=6 'rebar3 eunit'
  - console: erl
  <% elsif lang == "java" %>
  - tests: gradle --continuous test
  - console:
      # REF: https://tonnygaric.com/blog/how-to-run-jshell-on-mac-os-x-when-java-8-and-java-9-are-installed
      root: /Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/bin/
      panes: jshell
  <% elsif lang == "javascript" %>
  - tests: npm run test -- --watch
  # npm install -g watch
  - lint: watch 'eslint . --ext .js'
  - console: node
  <% elsif lang == "python" %>
  # pip install pytest-watch pycodestyle pytest-pycodestyle mypy pytest-mypy
  # https://github.com/joeyespo/pytest-watch
  # https://github.com/PyCQA/pycodestyle
  # https://github.com/python/mypy
  # Why --cache-clear? Because of pytest-cache plugin
  - tests: pytest-watch --runner 'pytest --pycodestyle --cache-clear --mypy'
  - console: python
  <% elsif lang == "ruby" %>
  # NOTE: There's currently a bunch of warning spam in the console, so use
  # RUBYOPT="-W0" to silence it. REF: https://stackoverflow.com/a/28098594/567863
  - tests: RUBYOPT="-W0" guard --guardfile ~/exercism/ruby/Guardfile
  - console: irb
  <% elsif lang == "rust" %>
  # NOTE: cargo install cargo-watch (https://github.com/passcod/cargo-watch)
  - tests: cargo watch --exec test --exec 'clippy --all-targets' --clear
  # No console/repl yet? https://github.com/rust-lang/rfcs/issues/655
  # - console:
  <% elsif lang == "typescript" %>
  - tests: yarn test --watch
  # npm install -g watch
  - lint: watch 'yarn lint --fix'
  - console: node
  <% end %>
  # brew install grip
  # https://github.com/joeyespo/grip
  - grip: grip
